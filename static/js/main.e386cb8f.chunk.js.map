{"version":3,"sources":["webpack:///./src/StateCompute.js?0f56","webpack:///./src/StateCompute.js?4de9","h.js","StateCompute.js","Draw.js","App.js","reportWebVitals.js","index.js"],"names":["inst","wrap","Worker","module","exports","f","this","getOrEval","e","swi","i","arguments","length","condition","arm","Array","isArray","flatstep","a","b","x","Math","max","min","clamp","smoothstep","t","DEFAULT_HP","require","DEFAULT_PA","POWER","arrow","name","damage","cooldown","cost","maxDist","fire","radius","diffPos","d","y","l","sqrt","indexFromPos","p","map","w","tileFromPos","tiles","enumeratePossibleActions","state","allActions","currentChar","forEach","dx","dy","newPos","push","type","chars","enemy","team","target","id","actions","action","evaluateAction","possible","effects","EFFECT_TYPES","END_WHOLE_TURN","BEGIN_TURN","REACT_TO_TILE","END_TURN","REGEN_PA","LOSE_PA","LOSE_HP","MOVE","EMPTY_POWER","SET_FIRE","ANIM_MOVE","ANIM_ATTACK","ANIM_ARROW","ANIM_END_TURN","currentCharId","tile","isWalkable","pa","filter","charId","from","to","find","hp","hpLost","power","r","uv","u","v","radiusToUV","h","index","tilesIndexFromPosRadius","tileIndex","applyEffects","animation","newEffects","effect","char","wasPositive","nextChars","tileId","Object","keys","k","lastPlayedTurn","Number","isInteger","tileEffect","includes","anim","startTime","performance","now","computedAt","tileName","nexts","MAX_SAFE_INTEGER","alives","slice","worker","MyWorker","_","Power","styled","div","Draw","user","do_action","useState","charHover","setCharHover","tileHover","setTileHover_","setTileHover","useMemo","throttle","actionsEffects","all","isAction","concat","sort","splice","canAction","myTeam","pass","useCallback","selectedPower","setSelectedPower","predictedAction","setPredictedAction","actionsRef","useRef","useEffect","current","scrollTop","scrollHeight","possibleActions","setTimeout","ticker","setTicker","timer","handle","tickAfter","old","eva","rawAction","tileClick","charClick","style","width","display","flexDirection","justifyContent","alignItems","position","onClick","flex","height","window","innerHeight","onCreated","gl","setClearColor","THREE","camera","fov","shadows","OrbitControls","makeDefault","intensity","castShadow","color","chunk","row","rowIndex","colIndex","Tile3D","Char3D","onMouseEnter","onMouseLeave","undefined","receiveShadow","scale","args","transparent","opacity","blending","Stats","showPanel","className","top","left","transform","padding","boxSizing","background","borderRadius","margin","userSelect","border","src","avatar","Detail","bottom","cursor","transition","fontSize","marginRight","minWidth","ref","overflowY","ActionEffectFrag","JSON","stringify","HoriChar","fontWeight","CharEffect","simpleE","cloneDeep","DLine","category","value","textAlign","right","groupRef","ally","charRef","setPosition","z","endTurnAnim","setEndTurnAnim","useFrame","elapsed","lambda","dd","angle","penumbra","Html","prepend","center","fullscreen","distanceFactor","zIndexRange","sprite","pointerEvents","zIndex","process","onPointerOver","onPointerOut","PI","attach","hovered","isFire","onPointerEnter","distance","ParticleSystem","active","mesh","dummy","particles","temp","maxLife","random","vx","vy","vz","xFactor","yFactor","zFactor","startLife","delta","time","particle","arr","s","set","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","MAP","replace","split","parseInt","alreadyReducing","reducer","console","log","generateBestIAAction","App","stateRef","randId","floor","ids","lastEffectTime","objects","onDestroyEffect","defaultState","dispatch","error","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e386cb8f.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/home/ctrl/prog/webturn/front/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/ctrl/prog/webturn/front/node_modules/react-scripts/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/home/ctrl/prog/webturn/front/src/StateCompute.js\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"2f3823dcfd96f47a2e1d.worker.js\");\n};","import React from \"react\";\n\nfunction getOrEval(e) {\n  return typeof e === \"function\" ? e() : e;\n}\nexport function swi() {\n  for (let i = 0; i < arguments.length - 1; i++) {\n    let [condition, arm] = arguments[i];\n    if (getOrEval(condition)) {\n      return getOrEval(arm);\n    }\n  }\n\n  let i = arguments.length - 1;\n  if (!Array.isArray(arguments[i])) return getOrEval(arguments[i]);\n  let [condition, arm] = arguments[i];\n  if (getOrEval(condition)) {\n    return getOrEval(arm);\n  }\n}\n\nexport const useAnimationFrame = (callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const stanRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = (time) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    stanRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(\n    () => {\n      stanRef.current = requestAnimationFrame(animate);\n      return () => cancelAnimationFrame(stanRef.current);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n};\n\nexport let clamp = (x, a, b) => Math.max(a, Math.min(b, x));\nexport let flatstep = (a, b, x) => clamp((x - a) / (b - a), 0, 1);\nexport let ease = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\nexport let smoothstep = (a, b, x) => ease(flatstep(a, b, x));\nexport let mix = (a, b, m) => a * (1.0 - m) + b * m;\n\nfunction asleep(delay) {\n  return new Promise((r) => setTimeout(r, delay));\n}\n","var _ = require(\"lodash\");\n\nexport const DEFAULT_HP = 10;\nexport const MAX_HP = 15;\nexport const DEFAULT_PA = 10;\nexport const MAX_PA = 15;\nexport const PA_REGEN = 10;\n\nexport const POWER = {\n  arrow: {\n    name: \"arrow\",\n    damage: 1,\n    cooldown: 2,\n    cost: 4,\n    maxDist: 7,\n  },\n  fire: {\n    name: \"fire\",\n    damage: 1,\n    radius: 1.5,\n    cooldown: 4,\n    cost: 5,\n    maxDist: 7,\n  },\n};\n\nexport function radiusToUV(r) {\n  if (r === 0) {\n    return [{ u: 0, v: 0 }];\n  }\n  if (r === 1) {\n    return [\n      { u: 0, v: 0 },\n      { u: 1, v: 0 },\n      { u: 0, v: 1 },\n      { u: -1, v: 0 },\n      { u: 0, v: -1 },\n    ];\n  }\n  if (r === 1.5) {\n    return [\n      { u: 0, v: 0 },\n      { u: 1, v: 0 },\n      { u: 0, v: 1 },\n      { u: -1, v: 0 },\n      { u: 0, v: -1 },\n      { u: 1, v: 1 },\n      { u: 1, v: -1 },\n      { u: -1, v: -1 },\n      { u: -1, v: 1 },\n    ];\n  }\n  if (r === 2) {\n    return [\n      { u: 0, v: 0 },\n      { u: 1, v: 0 },\n      { u: 0, v: 1 },\n      { u: -1, v: 0 },\n      { u: 0, v: -1 },\n      { u: 1, v: 1 },\n      { u: 1, v: -1 },\n      { u: -1, v: -1 },\n      { u: -1, v: 1 },\n      { u: 2, v: 0 },\n      { u: 0, v: 2 },\n      { u: -2, v: 0 },\n      { u: 0, v: -2 },\n    ];\n  }\n  if (r === 2.5) {\n    return [\n      { u: 0, v: 0 },\n      { u: 1, v: 0 },\n      { u: 0, v: 1 },\n      { u: -1, v: 0 },\n      { u: 0, v: -1 },\n      { u: 1, v: 1 },\n      { u: 1, v: -1 },\n      { u: -1, v: -1 },\n      { u: -1, v: 1 },\n      { u: 2, v: 0 },\n      { u: 0, v: 2 },\n      { u: -2, v: 0 },\n      { u: 0, v: -2 },\n\n      { u: 2, v: 1 },\n      { u: 1, v: 2 },\n      { u: -2, v: 1 },\n      { u: 1, v: -2 },\n\n      { u: 2, v: -1 },\n      { u: -1, v: 2 },\n      { u: -2, v: -1 },\n      { u: -1, v: -2 },\n    ];\n  }\n}\n\n/**\n *\n * @param {Object} a\n * @param {number} a.x\n * @param {number} a.y\n * @param {Object} b\n * @param {number} b.x\n * @param {number} b.y\n * @returns {{x:number, y:number}}\n */\nexport function addPos(a, b) {\n  return { x: b.x + a.x, y: b.y + a.y };\n}\n/**\n *\n * @param {Object} a\n * @param {number} a.x\n * @param {number} a.y\n * @param {Object} b\n * @param {number} b.x\n * @param {number} b.y\n * @returns {{x:number, y:number, l:number}}\n */\nexport function diffPos(a, b) {\n  let d = { x: b.x - a.x, y: b.y - a.y };\n  d.l = Math.sqrt(d.x * d.x + d.y * d.y);\n  return d;\n}\n\n/**\n * @param {Object} p\n * @param {number} p.x\n * @param {number} p.y\n */\nexport function indexFromPos(p, map) {\n  return p.x + p.y * map.w;\n}\n/**\n * @param {Object} p\n * @param {number} p.x\n * @param {number} p.y\n */\nexport function tileFromPos(p, map) {\n  return map.tiles[p.x + p.y * map.w];\n}\n\n/**\n * @param {Object} p\n * @param {number} p.x\n * @param {number} p.y\n */\nexport function tilesIndexFromPosRadius(p, r, map) {\n  let tiles = [];\n  let uv = radiusToUV(r);\n  uv.forEach(({ u, v }) => {\n    let x = p.x + u;\n    let y = p.y + v;\n    if (x >= 0 && x < map.w && y >= 0 && y < map.h) {\n      let index = x + y * map.w;\n      tiles.push(index);\n    }\n  });\n\n  return tiles;\n}\n\nexport function rateState(state, fromIdPov) {\n  let score = 0;\n  let current = state.chars.find((e) => e.id === fromIdPov);\n  let myTeam = current.team;\n\n  let closestEnnemy = null;\n  state.chars.forEach((other) => {\n    let ally = other.team === myTeam;\n    let factor = ally ? 1 : -1;\n    score += (other.pa * 0.0 + Math.pow(other.hp, 0.5)) * factor;\n\n    if (!ally && other.hp > 0) {\n      let d = diffPos(other, current);\n      if (!closestEnnemy || d.l < closestEnnemy.l) {\n        closestEnnemy = { l: d.l, ...other };\n      }\n    }\n  });\n\n  if (closestEnnemy) {\n    score -= closestEnnemy.l * 0.01;\n  }\n\n  return score;\n}\n\nexport function enumeratePossibleActions(state) {\n  let allActions = [];\n  const currentChar = state.currentChar;\n  //Move\n  [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ].forEach(([dx, dy]) => {\n    let newPos = addPos(currentChar, { x: dx, y: dy });\n    allActions.push({ type: \"move\", ...newPos });\n  });\n  //Attack\n  state.chars.forEach((enemy) => {\n    if (enemy.team !== currentChar.team) {\n      allActions.push({ type: \"attack\", target: enemy.id });\n    }\n  });\n  //Arrow\n  state.chars.forEach((enemy) => {\n    if (enemy.team !== currentChar.team) {\n      allActions.push({ type: \"arrow\", target: enemy.id });\n    }\n  });\n\n  //Fire\n  state.chars.forEach((enemy) => {\n    if (enemy.team !== currentChar.team) {\n      allActions.push({ type: \"fire\", x: enemy.x, y: enemy.y });\n    }\n  });\n\n  //Pass\n  {\n    allActions.push({ type: \"pass\" });\n  }\n\n  let actions = [];\n  allActions.forEach((action) => {\n    let { cost, possible, effects } = evaluateAction(state, action);\n    if (possible) {\n      actions.push({ ...action, cost, effects });\n    }\n  });\n\n  return actions;\n}\n\nexport function bestAction(old, actions_) {\n  let actions = actions_.map((action) => {\n    let newSubState = minimalStateCopy(old);\n\n    applyEffects(newSubState, action.effects);\n    // let score = rateState(newSubState, old.currentChar.id);\n\n    let score = exploreAndRate(newSubState, old.currentChar.id, 4);\n\n    return { ...action, score };\n  });\n\n  //Take one of the best outcome\n  actions.sort((a, b) => b.score - a.score);\n  actions = _.takeWhile(actions, (e) => e.score === actions[0].score);\n\n  return _.sample(actions);\n}\n\nexport function generateBestIAAction(state) {\n  let start = performance.now();\n  let actions = enumeratePossibleActions(state);\n  let action = bestAction(state, actions);\n  console.log(\"IA PLAY took:\", performance.now() - start, \"ms\");\n  return action;\n}\n\nexport const EFFECT_TYPES = {\n  END_WHOLE_TURN: \"END_WHOLE_TURN\",\n  BEGIN_TURN: \"BEGIN_TURN\",\n  REACT_TO_TILE: \"REACT_TO_TILE\",\n  END_TURN: \"END_TURN\",\n  REGEN_PA: \"REGEN_PA\",\n  LOSE_PA: \"LOSE_PA\",\n  LOSE_HP: \"LOSE_HP\",\n  MOVE: \"MOVE\",\n\n  EMPTY_POWER: \"EMPTY_POWER\",\n\n  //TILE EFFECT\n  SET_FIRE: \"SET_FIRE\",\n\n  //ANIMATION EFFECT\n  ANIM_MOVE: \"ANIM_MOVE\",\n  ANIM_ATTACK: \"ANIM_ATTACK\",\n  ANIM_ARROW: \"ANIM_ARROW\",\n  ANIM_END_TURN: \"ANIM_END_TURN\",\n};\n\n/**\n *\n * @param {*} state\n * @param {*} action\n * @returns {{cost:number, possible:boolean, effects : *}}\n */\nexport function evaluateAction(state, action) {\n  const currentChar = state.currentChar;\n  const currentCharId = state.currentChar.id;\n  let cost = 0;\n  let possible = false;\n\n  let effects = [];\n\n  if (action.type === \"move\") {\n    let tile = tileFromPos(action, state.map);\n    if (isWalkable(tile)) {\n      let d = diffPos(currentChar, action);\n      let canReach = d.l > 0 && d.l < 1.5;\n      if (canReach) {\n        cost = d.l === 1 ? 2 : 3;\n        let hasEnoughMana = cost <= currentChar.pa;\n        if (hasEnoughMana) {\n          let noOtherChar =\n            state.chars.filter((e) => e.x === action.x && e.y === action.y)\n              .length === 0;\n          possible = noOtherChar;\n          if (possible) {\n            effects.push({\n              type: EFFECT_TYPES.LOSE_PA,\n              charId: currentCharId,\n              cost,\n            });\n            effects.push({\n              type: EFFECT_TYPES.ANIM_MOVE,\n              charId: currentCharId,\n              from: { x: currentChar.x, y: currentChar.y },\n              to: { x: action.x, y: action.y },\n            });\n            effects.push({\n              type: EFFECT_TYPES.MOVE,\n              charId: currentCharId,\n              x: action.x,\n              y: action.y,\n            });\n          }\n        }\n      }\n    }\n  } else if (action.type === \"attack\") {\n    cost = 3;\n    let target = state.chars.find((e) => e.id === action.target);\n\n    if (target.hp > 0) {\n      let d = diffPos(currentChar, target);\n      let canReach = d.l > 0 && d.l < 1.5;\n      if (canReach) {\n        let hasEnoughMana = cost <= currentChar.pa;\n        if (hasEnoughMana) {\n          possible = true;\n          effects.push({\n            type: EFFECT_TYPES.ANIM_ATTACK,\n            charId: currentCharId,\n            d: d,\n          });\n          effects.push({\n            type: EFFECT_TYPES.LOSE_PA,\n            charId: currentCharId,\n            cost,\n          });\n\n          effects.push({\n            type: EFFECT_TYPES.LOSE_HP,\n            charId: action.target,\n            hpLost: 1,\n          });\n        }\n      }\n    }\n  } else if (action.type === \"arrow\") {\n    let power = POWER[action.type];\n    cost = power.cost;\n    let target = state.chars.find((e) => e.id === action.target);\n\n    if (!currentChar.cooldown[action.type] && target.hp > 0) {\n      let d = diffPos(currentChar, target);\n      let canReach = d.l > 0 && d.l <= power.maxDist;\n      if (canReach) {\n        let hasEnoughMana = cost <= currentChar.pa;\n        if (hasEnoughMana) {\n          possible = true;\n          effects.push({\n            type: EFFECT_TYPES.EMPTY_POWER,\n            charId: currentCharId,\n            power: power.name,\n          });\n          effects.push({\n            type: EFFECT_TYPES.ANIM_ARROW,\n            charId: currentCharId,\n            from: { x: currentChar.x, y: currentChar.y },\n            to: { x: target.x, y: target.y },\n            d: d,\n          });\n          effects.push({\n            type: EFFECT_TYPES.LOSE_PA,\n            charId: currentCharId,\n            cost,\n          });\n\n          effects.push({\n            type: EFFECT_TYPES.LOSE_HP,\n            charId: action.target,\n            hpLost: 1,\n          });\n        }\n      }\n    }\n  } else if (action.type === \"fire\") {\n    let power = POWER[action.type];\n    cost = power.cost;\n\n    if (!currentChar.cooldown[action.type]) {\n      let d = diffPos(currentChar, action);\n      let canReach = d.l <= power.maxDist;\n      if (canReach) {\n        let hasEnoughMana = cost <= currentChar.pa;\n        if (hasEnoughMana) {\n          possible = true;\n\n          let tileIndices = tilesIndexFromPosRadius(\n            action,\n            power.radius,\n            state.map\n          );\n\n          tileIndices.forEach((tileIndex) => {\n            effects.push({\n              type: EFFECT_TYPES.SET_FIRE,\n              tileIndex,\n            });\n          });\n\n          effects.push({\n            type: EFFECT_TYPES.EMPTY_POWER,\n            charId: currentCharId,\n            power: power.name,\n          });\n          effects.push({\n            type: EFFECT_TYPES.ANIM_ARROW,\n            charId: currentCharId,\n            from: { x: currentChar.x, y: currentChar.y },\n            to: { x: action.x, y: action.y },\n            d: d,\n          });\n          effects.push({\n            type: EFFECT_TYPES.LOSE_PA,\n            charId: currentCharId,\n            cost,\n          });\n\n          state.chars.forEach((e) => {\n            if (diffPos(e, action).l <= power.radius) {\n              effects.push({\n                type: EFFECT_TYPES.LOSE_HP,\n                charId: e.id,\n                hpLost: 1,\n              });\n            }\n          });\n        }\n      }\n    }\n  } else if (action.type === \"pass\") {\n    cost = 0;\n    possible = true;\n    effects.push({ type: EFFECT_TYPES.ANIM_END_TURN, charId: currentCharId });\n    effects.push({ type: EFFECT_TYPES.END_TURN, charId: currentCharId });\n  }\n\n  return { cost, possible, effects };\n}\n\nexport function applyEffects(state, effects, animation = false) {\n  if (effects.length === 0) return;\n\n  let newEffects = [];\n  effects.forEach((effect) => {\n    if (effect.type === EFFECT_TYPES.LOSE_HP) {\n      let char = state.chars.find((e) => e.id === effect.charId);\n      let wasPositive = char.hp > 0;\n      char.hp = Math.max(0, char.hp - effect.hpLost);\n\n      if (wasPositive && char.hp <= 0 && state.currentChar.id === char.id) {\n        state.nextChars = nextChars(state);\n        state.currentChar = state.nextChars[0];\n        newEffects.push({ type: EFFECT_TYPES.END_TURN, charId: effect.charId });\n      }\n    } else if (effect.type === EFFECT_TYPES.LOSE_PA) {\n      state.chars.find((e) => e.id === effect.charId).pa -= effect.cost;\n    } else if (effect.type === EFFECT_TYPES.EMPTY_POWER) {\n      state.chars.find((e) => e.id === effect.charId).cooldown[effect.power] =\n        POWER[effect.power].cooldown;\n    } else if (effect.type === EFFECT_TYPES.MOVE) {\n      let char = state.chars.find((e) => e.id === effect.charId);\n      char.x = effect.x;\n      char.y = effect.y;\n      let tile = tileFromPos(effect, state.map);\n      if (tile.effects.length > 0) {\n        newEffects.push({\n          type: EFFECT_TYPES.REACT_TO_TILE,\n          charId: char.id,\n          tileId: indexFromPos(char, state.map),\n        });\n      }\n    } else if (effect.type === EFFECT_TYPES.REGEN_PA) {\n      let char = state.chars.find((e) => e.id === effect.charId);\n      char.pa = Math.min(char.pa + PA_REGEN, MAX_PA);\n    } else if (effect.type === EFFECT_TYPES.REACT_TO_TILE) {\n      let char = state.chars.find((e) => e.id === effect.charId);\n      let tile = state.map.tiles[effect.tileId];\n      tile.effects.forEach((e) => {\n        if (e.type === \"fire\") {\n          newEffects.push({\n            type: EFFECT_TYPES.LOSE_HP,\n            charId: char.id,\n            hpLost: 1,\n          });\n        }\n      });\n    } else if (effect.type === EFFECT_TYPES.END_TURN) {\n      let char = state.chars.find((e) => e.id === effect.charId);\n      Object.keys(char.cooldown).forEach((k) => {\n        let v = char.cooldown[k];\n        if (v === 1) {\n          delete char.cooldown[k];\n        } else {\n          char.cooldown[k] -= 1;\n        }\n      });\n      char.lastPlayedTurn += 1;\n\n      if (char.hp > 0)\n        newEffects.push({ type: EFFECT_TYPES.REGEN_PA, charId: effect.charId });\n\n      if (state.nextChars[1] === \"/\") {\n        newEffects.push({ type: EFFECT_TYPES.END_WHOLE_TURN });\n      }\n      state.nextChars = nextChars(state);\n      state.currentChar = state.nextChars[0];\n\n      newEffects.push({ type: EFFECT_TYPES.BEGIN_TURN });\n    } else if (effect.type === EFFECT_TYPES.END_WHOLE_TURN) {\n      state.map.tiles.forEach((tile) => {\n        tile.effects = tile.effects\n          .map((e) => {\n            if (Number.isInteger(e.cooldown)) {\n              e.cooldown -= 1;\n            }\n            return e;\n          })\n          .filter((e) => e.cooldown !== 0);\n      });\n    } else if (effect.type === EFFECT_TYPES.BEGIN_TURN) {\n      newEffects.push({\n        type: EFFECT_TYPES.REACT_TO_TILE,\n        charId: state.currentChar.id,\n        tileId: indexFromPos(state.currentChar, state.map),\n      });\n    } else if (effect.type === EFFECT_TYPES.SET_FIRE) {\n      let tile = state.map.tiles[effect.tileIndex];\n      let tileEffect = tile.effects.find((e) => e.type === \"fire\");\n      if (!tileEffect) {\n        tileEffect = { type: \"fire\" };\n        tile.effects.push(tileEffect);\n      }\n      tileEffect.cooldown = 2;\n    }\n\n    if (animation === true) {\n      if (\n        [\n          EFFECT_TYPES.ANIM_ATTACK,\n          EFFECT_TYPES.ANIM_MOVE,\n          EFFECT_TYPES.ANIM_ARROW,\n          EFFECT_TYPES.ANIM_END_TURN,\n        ].includes(effect.type)\n      ) {\n        state.chars.find((e) => e.id === effect.charId).anim = {\n          ...effect,\n          startTime: performance.now(),\n        };\n      }\n    }\n\n    state.effects.push({ computedAt: performance.now(), ...effect });\n  });\n\n  applyEffects(state, newEffects, animation);\n}\n\nexport function minimalStateCopy(state) {\n  return _.cloneDeep({\n    chars: state.chars,\n    map: state.map,\n\n    currentChar: state.currentChar,\n    nextChars: state.nextChars,\n    actions: [],\n    effects: [],\n  });\n}\n\nexport function exploreAndRate(state, charIdPov, depth) {\n  //Turn has ended for charIdPov, or search depth limit is reached.\n  if (depth === 0 || state.currentChar.id !== charIdPov) {\n    return rateState(state, charIdPov);\n  }\n\n  // let prefix = \"\";\n  // if (depth === 3) prefix = \" \";\n  // if (depth === 2) prefix = \"  \";\n  // if (depth === 1) prefix = \"   \";\n  // console.log(prefix, \"explore\", depth, \"current\", state.currentChar.name);\n  let maxScore = -9999;\n\n  let actions = enumeratePossibleActions(state);\n  actions.forEach((action) => {\n    let newSubState = minimalStateCopy(state);\n    applyEffects(newSubState, action.effects);\n    let score = exploreAndRate(newSubState, charIdPov, depth - 1);\n    maxScore = Math.max(score, maxScore);\n  });\n\n  return maxScore;\n}\n\nexport function isWalkable(tile) {\n  return tile.type === 0;\n}\n\nexport function tileName(tile) {\n  if (tile.type === 0) return \"ground\";\n  if (tile.type === 1) return \"wall\";\n  return \"unknown\";\n}\n\nexport let nextChars = (state) => {\n  let nexts = [];\n  let lastPlayedTurn = Number.MAX_SAFE_INTEGER;\n\n  let alives = state.chars.filter((e) => e.hp > 0);\n\n  alives.forEach((char) => {\n    lastPlayedTurn = Math.min(lastPlayedTurn, char.lastPlayedTurn);\n  });\n\n  alives\n    .filter((char) => char.lastPlayedTurn === lastPlayedTurn)\n    .forEach((char) => {\n      nexts.push(char);\n    });\n\n  nexts.push(\"/\");\n\n  while (nexts.length < 10) {\n    alives.forEach((char) => {\n      nexts.push(char);\n    });\n  }\n  return nexts.slice(0, 10);\n};\n","// eslint-disable-next-line\nimport MyWorker from \"comlink-loader!./StateCompute\";\nimport { smoothstep, swi, useAnimationFrame } from \"./h\";\n\nimport styled, { keyframes } from \"styled-components\";\nimport {\n  ContactShadows,\n  Html,\n  OrbitControls,\n  Plane,\n  PresentationControls,\n  Ring,\n  softShadows,\n  Stats,\n} from \"@react-three/drei\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  DEFAULT_HP,\n  EFFECT_TYPES,\n  enumeratePossibleActions,\n  evaluateAction,\n  MAX_PA,\n  POWER,\n  radiusToUV,\n  tileName,\n} from \"./StateCompute\";\nimport * as THREE from \"three\";\n\nimport { EffectComposer, SSAO, Vignette } from \"@react-three/postprocessing\";\nimport { BlendFunction } from \"postprocessing\";\n\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nconst worker = new MyWorker();\nvar _ = require(\"lodash\");\n\nconst TILE_WIDTH = 50;\n\nconst Power = styled.div`\n  width: 50px;\n  height: 50px;\n  transition: 200ms;\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport default function Draw({ state, user, do_action }) {\n  let [charHover, setCharHover] = useState(null);\n  let [tileHover, setTileHover_] = useState(null);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     softShadows();\n  //   }, 1000);\n  // }, []);\n\n  let setTileHover = useMemo(() => _.throttle(setTileHover_, 30), []);\n\n  let actionsEffects = useMemo(() => {\n    let all = state.actions\n      .map((e) => {\n        return { isAction: true, ...e };\n      })\n      .concat(state.effects);\n    all.sort((a, b) => a.computedAt - b.computedAt);\n\n    all.splice(0, all.length - 100);\n    return all;\n  }, [state]);\n\n  let currentChar = state.currentChar;\n  let canAction = currentChar.user === user;\n  let myTeam = useMemo(() => {\n    return state.chars.find((e) => e.user === user).team;\n  }, [state, user]);\n\n  const pass = useCallback(() => {\n    if (canAction) {\n      do_action({ type: \"pass\", charId: state.currentChar.id, user });\n    }\n  }, [state, user, do_action]);\n\n  const [selectedPower, setSelectedPower] = useState(null);\n  const [predictedAction, setPredictedAction] = useState({\n    possible: false,\n    cost: 0,\n    type: \"none\",\n  });\n\n  const actionsRef = useRef();\n\n  useEffect(() => {\n    let e = actionsRef.current;\n    e.scrollTop = e.scrollHeight;\n  }, [state]);\n\n  useEffect(() => {\n    setSelectedPower(null);\n  }, [state]);\n\n  let possibleActions = useMemo(() => {\n    return enumeratePossibleActions(state).map((e) => {\n      delete e.effects;\n      return e;\n    });\n  }, [state]);\n\n  useEffect(() => {\n    if (canAction && possibleActions.length === 1) {\n      setTimeout(() => {\n        pass();\n      }, 500);\n    }\n  }, [canAction, possibleActions, pass]);\n\n  let [ticker, setTicker] = useState(0);\n  let timer = useRef({ handle: null, tickAfter: false });\n  useEffect(() => {\n    if (!timer.current.handle) {\n      timer.current.handle = setTimeout(() => {\n        timer.current.handle = null;\n        if (timer.current.tickAfter) {\n          setTicker((old) => old + 1);\n          timer.current.tickAfter = false;\n        }\n      }, 100);\n    } else {\n      timer.current.tickAfter = true;\n      return;\n    }\n    let type = \"none\";\n    let cost = 0;\n    let possible = false;\n    let eva = null;\n    let rawAction = null;\n    //Simple move\n    if (selectedPower === null && tileHover !== null && charHover === null) {\n      type = \"move\";\n      rawAction = {\n        type,\n        x: tileHover.x,\n        y: tileHover.y,\n      };\n    } else if (\n      (selectedPower === \"attack\" || selectedPower === null) &&\n      charHover !== null &&\n      charHover !== state.currentChar.id\n    ) {\n      type = \"attack\";\n      rawAction = {\n        type,\n        target: charHover,\n      };\n    } else if (selectedPower === \"arrow\") {\n      type = \"arrow\";\n\n      if (charHover !== null && charHover !== state.currentChar.id)\n        rawAction = {\n          type,\n          target: charHover,\n        };\n    } else if (selectedPower === \"fire\" && tileHover !== null) {\n      type = \"fire\";\n      rawAction = {\n        type,\n        x: tileHover.x,\n        y: tileHover.y,\n      };\n    }\n\n    (async () => {\n      if (rawAction) {\n        eva = await worker.evaluateAction(state, rawAction);\n      }\n      if (eva) {\n        cost = eva.cost;\n        possible = eva.possible;\n      }\n      setPredictedAction({ type, possible, cost, rawAction });\n    })();\n  }, [state, selectedPower, charHover, tileHover, ticker]);\n\n  const tileClick = useCallback(() => {\n    if (canAction && predictedAction.possible === true) {\n      do_action(predictedAction.rawAction);\n    }\n  }, [do_action, predictedAction]);\n\n  const charClick = useCallback(() => {\n    if (canAction && predictedAction.possible === true) {\n      do_action(predictedAction.rawAction);\n    }\n  }, [do_action, predictedAction]);\n\n  let mapRef = useRef();\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div style={{ display: \"flex\", width: \"100%\", position: \"relative\" }}>\n        {/* MAP */}\n        {/* <div\n          style={{\n            position: \"relative\",\n            cursor: swi(\n              [!canAction, \"not-allowed\"],\n              [predictedAction.type === \"attack\", \"crosshair\"],\n              [predictedAction.possible === true, \"pointer\"],\n              \"not-allowed\"\n            ),\n          }}\n        >\n          {_.chunk(state.map.tiles, state.map.w).map((row, rowIndex) => (\n            <div key={rowIndex} style={{ display: \"flex\" }}>\n              {row.map((tile, colIndex) => (\n                <Tile\n                  key={colIndex}\n                  tile={tile}\n                  tileHover={tileHover}\n                  colIndex={colIndex}\n                  rowIndex={rowIndex}\n                  state={state}\n                ></Tile>\n              ))}\n            </div>\n          ))}\n          <div\n            onClick={() => tileClick(tileHover.x, tileHover.y)}\n            ref={mapRef}\n            onMouseMove={(e) => {\n              let bb = mapRef.current.getBoundingClientRect();\n              let x = Math.floor((e.clientX - bb.x) / TILE_WIDTH);\n              let y = Math.floor((e.clientY - bb.y) / TILE_WIDTH);\n              let index = x + state.map.w * y;\n              setTileHover({ x, y, index });\n            }}\n            style={{\n              position: \"absolute\",\n              top: \"0px\",\n              left: \"0px\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          ></div>\n\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"0px\",\n              left: \"0px\",\n              width: \"100%\",\n              height: \"100%\",\n              pointerEvents: \"none\",\n            }}\n          >\n            {tileHover &&\n              predictedAction &&\n              POWER[predictedAction.type] &&\n              POWER[predictedAction.type].radius !== undefined &&\n              radiusToUV(POWER[predictedAction.type].radius).map(({ u, v }) => (\n                <div\n                  key={u + \"/\" + v}\n                  style={{\n                    position: \"absolute\",\n                    left: TILE_WIDTH * (u + tileHover.x) + \"px\",\n                    top: TILE_WIDTH * (v + tileHover.y) + \"px\",\n                    width: \"50px\",\n                    height: \"50px\",\n                    background: \"#fff5\",\n                  }}\n                ></div>\n              ))}\n\n            {predictedAction &&\n              POWER[predictedAction.type] &&\n              POWER[predictedAction.type].maxDist !== undefined && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: (currentChar.y + 0.5) * TILE_WIDTH + \"px\",\n                    left: (currentChar.x + 0.5) * TILE_WIDTH + \"px\",\n                    width:\n                      POWER[predictedAction.type].maxDist * 2 * TILE_WIDTH +\n                      \"px\",\n                    height:\n                      POWER[predictedAction.type].maxDist * 2 * TILE_WIDTH +\n                      \"px\",\n                    transform: \"translate(-50%,-50%)\",\n                    borderRadius: \"50%\",\n                    background: \"#0f94\",\n                  }}\n                ></div>\n              )}\n          </div>\n\n          {state.chars.map((char) => (\n            <DisplayChar\n              key={\"cahr\" + char.id}\n              charHover={charHover}\n              onMouseEnter={() => setCharHover(char.id)}\n              onMouseLeave={() => setCharHover(null)}\n              onClick={() => charClick(char.id)}\n              currentChar={currentChar}\n              char={char}\n              myTeam={myTeam}\n            ></DisplayChar>\n          ))}\n        </div> */}\n\n        <div\n          onClick={tileClick}\n          style={{\n            flex: \"1 1 auto\",\n            height: window.innerHeight - 100 + \"px\",\n            position: \"relative\",\n            // border: \"5px solid #ccc\",\n          }}\n        >\n          <Canvas\n            onCreated={({ gl }) => {\n              gl.setClearColor(new THREE.Color(\"#789\"));\n            }}\n            camera={{ position: [3, 30, 20], fov: 35 }}\n            shadows\n          >\n            <OrbitControls makeDefault />\n            <group position-x={-7} position-z={-7}>\n              <ambientLight intensity={0.5} />\n              <pointLight\n                castShadow\n                position={[0, 5, 0]}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n                color={\"#fdb\"}\n              />\n              <pointLight\n                castShadow\n                position={[14, 5, 14]}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n                color={\"#bdf\"}\n              />\n\n              {_.chunk(state.map.tiles, state.map.w).map((row, rowIndex) =>\n                row.map((tile, colIndex) => (\n                  <Tile3D\n                    key={colIndex}\n                    tile={tile}\n                    setTileHover={setTileHover}\n                    tileHover={tileHover}\n                    colIndex={colIndex}\n                    rowIndex={rowIndex}\n                    state={state}\n                  ></Tile3D>\n                ))\n              )}\n              {state.chars.map((char) => (\n                <Char3D\n                  key={\"cahr\" + char.id}\n                  charHover={charHover}\n                  onMouseEnter={() => setCharHover(char.id)}\n                  onMouseLeave={() => setCharHover(null)}\n                  onClick={() => charClick(char.id)}\n                  currentChar={currentChar}\n                  char={char}\n                  myTeam={myTeam}\n                ></Char3D>\n              ))}\n\n              {/* PREDICTION */}\n              {/* {tileHover &&\n              predictedAction &&\n              POWER[predictedAction.type] &&\n              POWER[predictedAction.type].radius !== undefined &&\n              radiusToUV(POWER[predictedAction.type].radius).map(({ u, v }) => (\n                <div\n                  key={u + \"/\" + v}\n                  style={{\n                    position: \"absolute\",\n                    left: TILE_WIDTH * (u + tileHover.x) + \"px\",\n                    top: TILE_WIDTH * (v + tileHover.y) + \"px\",\n                    width: \"50px\",\n                    height: \"50px\",\n                    background: \"#fff5\",\n                  }}\n                ></div>\n              ))} */}\n\n              {predictedAction &&\n                POWER[predictedAction.type] &&\n                POWER[predictedAction.type].maxDist !== undefined && (\n                  <mesh\n                    castShadow\n                    receiveShadow\n                    position={[currentChar.x, 0, currentChar.y]}\n                    scale={1}\n                  >\n                    <sphereGeometry\n                      args={[POWER[predictedAction.type].maxDist]}\n                    />\n                    <meshBasicMaterial\n                      color={\"green\"}\n                      transparent\n                      opacity={0.3}\n                      blending={THREE.AdditiveBlending}\n                    />\n                  </mesh>\n\n                  // <div\n                  //   style={{\n                  //     position: \"absolute\",\n                  //     top: (currentChar.y + 0.5) * TILE_WIDTH + \"px\",\n                  //     left: (currentChar.x + 0.5) * TILE_WIDTH + \"px\",\n                  //     width:\n                  //       POWER[predictedAction.type].maxDist * 2 * TILE_WIDTH +\n                  //       \"px\",\n                  //     height:\n                  //       POWER[predictedAction.type].maxDist * 2 * TILE_WIDTH +\n                  //       \"px\",\n                  //     transform: \"translate(-50%,-50%)\",\n                  //     borderRadius: \"50%\",\n                  //     background: \"#0f94\",\n                  //   }}\n                  // ></div>\n                )}\n            </group>\n            <Stats showPanel={0} className=\"stats\" />\n          </Canvas>\n        </div>\n\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"90px\",\n          }}\n        >\n          webturn v:0.0.10\n        </div>\n        {/* NEXT TURN */}\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"10px\",\n            left: \"50%\",\n            transform: \"translate(-50%,0%)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"5px\",\n            boxSizing: \"border-box\",\n            background: \"#fff5\",\n            borderRadius: \"5px\",\n          }}\n        >\n          {state.nextChars.map((char, index) =>\n            swi([char === \"/\", () => <div>|</div>], () => (\n              <div\n                key={char.id + index}\n                onMouseEnter={() => setCharHover(char.id)}\n                onMouseLeave={() => setCharHover(null)}\n                style={{\n                  background: charHover === char.id ? \"#ccc\" : \"#fff\",\n                  padding: \"5px\",\n                  margin: \"5px\",\n                  color: \"black\",\n                  userSelect: \"none\",\n                  border: index === 0 ? \"4px solid #aef\" : \"2px solid #0000\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <div>\n                  <img style={{ width: \"30px\" }} src={char.avatar}></img>\n                </div>\n                {char.name}\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* DETAIL */}\n        <Detail\n          tileHover={tileHover}\n          charHover={charHover}\n          state={state}\n        ></Detail>\n\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: \"0px\",\n            left: \"0px\",\n            // transform: \"translate(-50%,0%)\",\n            opacity: canAction ? \"1\" : \"0.7\",\n            cursor: canAction ? \"auto\" : \"not-allowed\",\n          }}\n        >\n          <div\n            style={{ display: \"flex\", alignItems: \"center\", margin: \"10px\" }}\n          >\n            {swi(\n              [predictedAction.type === \"none\", () => <div>none</div>],\n              [\n                predictedAction.type !== \"none\",\n                () => (\n                  <div\n                    style={{\n                      color: predictedAction.possible ? \"black\" : \"red\",\n                    }}\n                  >\n                    {predictedAction.type} (cost {predictedAction.cost})\n                  </div>\n                ),\n              ]\n            )}\n          </div>\n\n          <div\n            style={{ display: \"flex\", alignItems: \"center\", margin: \"10px\" }}\n          >\n            {[...Array(MAX_PA).keys()].map((i) => (\n              <div\n                key={currentChar.id + \"/\" + i}\n                style={{\n                  width: \"30px\",\n                  height: \"30px\",\n                  borderRadius: \"50%\",\n                  margin: \"5px\",\n                  border: \"3px solid black\",\n                  transition: \"500ms\",\n                  background: swi(\n                    [i + 1 <= currentChar.pa - predictedAction.cost, \"#bbb\"],\n                    [i + 1 <= currentChar.pa, \"#5ee\"],\n                    \"#000\"\n                  ),\n                }}\n              ></div>\n            ))}\n          </div>\n\n          <div style={{ margin: \"10px\", background: \"#777\" }}>\n            <div\n              style={{\n                fontSize: \"1.2em\",\n                background: \"#345\",\n                color: \"white\",\n                padding: \"5px\",\n              }}\n            >\n              Power\n            </div>\n            <div style={{ display: \"flex\" }}>\n              <Power\n                onClick={() => setSelectedPower(null)}\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  background: \"#333\",\n                  color: \"white\",\n                  border: \"3px solid #000\",\n                }}\n              >\n                Move\n              </Power>\n              <Power\n                onClick={pass}\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  background: \"#333\",\n                  color: \"white\",\n                  border: \"3px solid #000\",\n                }}\n              >\n                Pass\n              </Power>\n              <Power\n                onClick={() =>\n                  setSelectedPower((old) =>\n                    old === \"attack\" ? null : \"attack\"\n                  )\n                }\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  background: selectedPower === \"attack\" ? \"#999\" : \"#333\",\n                  color: \"white\",\n                  border: \"3px solid #000\",\n                }}\n              >\n                Attack\n              </Power>\n\n              {[\"arrow\", \"fire\"].map((power) => (\n                <Power\n                  key={power}\n                  onClick={() => {\n                    if (!currentChar.cooldown[power]) {\n                      setSelectedPower((old) => (old === power ? null : power));\n                    }\n                  }}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    background: swi(\n                      [currentChar.cooldown[power], \"#a00\"],\n                      selectedPower === power ? \"#999\" : \"#333\"\n                    ),\n                    color: \"white\",\n                    border: \"3px solid #000\",\n                  }}\n                >\n                  {power}\n                  {currentChar.cooldown[power] &&\n                    \" (\" + currentChar.cooldown[power] + \")\"}\n                </Power>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          opacity: canAction ? \"1\" : \"0.7\",\n          cursor: canAction ? \"auto\" : \"not-allowed\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            margin: \"10px\",\n          }}\n        >\n          <div style={{ marginRight: \"20px\", minWidth: \"450px\" }}>\n            <div\n              style={{\n                fontSize: \"1.2em\",\n                background: \"#345\",\n                color: \"white\",\n                padding: \"5px\",\n              }}\n            >\n              History\n            </div>\n            <div\n              ref={actionsRef}\n              style={{\n                background: \"#eee\",\n                height: \"200px\",\n                overflowY: \"scroll\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-start\",\n              }}\n            >\n              {actionsEffects.map((action, index) => (\n                <div key={index} style={{}}>\n                  <ActionEffectFrag\n                    action={action}\n                    state={state}\n                  ></ActionEffectFrag>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"flex-start\",\n              alignItems: \"flex-start\",\n              flex: \"1 100 auto\",\n              background: \"#eee\",\n              minWidth: \"450px\",\n            }}\n          >\n            <div\n              style={{\n                fontSize: \"1.2em\",\n                background: \"#345\",\n                color: \"white\",\n                padding: \"5px\",\n                width: \"100%\",\n                boxSizing: \"border-box\",\n              }}\n            >\n              Possible actions\n            </div>\n            {possibleActions.map((action, index) => (\n              <div key={index}>{JSON.stringify(action)}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction HoriChar({ name, avatar }) {\n  return (\n    <div\n      style={{\n        fontWeight: \"500\",\n        width: \"100px\",\n        flex: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        background: \"#ccc\",\n        color: \"black\",\n        height: \"30px\",\n      }}\n    >\n      <img style={{ width: \"30px\", marginRight: \"5px\" }} src={avatar}></img>\n      <div>{name}</div>\n    </div>\n  );\n}\n\nfunction CharEffect({ effect, state }) {\n  let char = useMemo(() => {\n    return state.chars.find((e) => e.id === effect.charId);\n  }, [state]);\n\n  let simpleE = useMemo(() => {\n    let a = _.cloneDeep(effect);\n    delete a.computedAt;\n    delete a.charId;\n    delete a.type;\n    return a;\n  }, [effect]);\n\n  return (\n    <div\n      style={{\n        margin: \"2px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n      }}\n    >\n      <div style={{ marginRight: \"40px\" }}></div>\n      {char && <HoriChar name={char.name} avatar={char.avatar}></HoriChar>}\n      <div\n        style={{\n          fontWeight: \"500\",\n          width: \"150px\",\n          padding: \"4px\",\n          height: \"30px\",\n          boxSizing: \"border-box\",\n          flex: \"none\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-start\",\n          background: \"#666\",\n          color: \"white\",\n        }}\n      >\n        {effect.type}\n      </div>\n      <div style={{ fontSize: \"0.8em\", fontWeight: \"bold\", padding: \"2px\" }}>\n        {JSON.stringify(simpleE)}\n      </div>\n    </div>\n  );\n}\n\nfunction ActionEffectFrag({ action, state }) {\n  if (!action.isAction)\n    return <CharEffect effect={action} state={state}></CharEffect>;\n\n  return (\n    <div\n      style={{\n        margin: \"2px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n      }}\n    >\n      <HoriChar name={action.char.name} avatar={action.char.avatar}></HoriChar>\n      <div\n        style={{\n          fontWeight: \"500\",\n          width: \"150px\",\n          padding: \"4px\",\n          height: \"30px\",\n          boxSizing: \"border-box\",\n          flex: \"none\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-start\",\n          background: \"#666\",\n          color: \"white\",\n        }}\n      >\n        {action.type}\n      </div>\n\n      {swi(\n        [\n          action.type === \"move\",\n          () => (\n            <div\n              style={{ fontSize: \"0.8em\", fontWeight: \"bold\", padding: \"2px\" }}\n            >\n              x:{action.x} / y:{action.y}\n            </div>\n          ),\n        ],\n        [\n          action.type === \"attack\" || action.type === \"arrow\",\n          () => {\n            let t = state.chars.find((e) => e.id === action.target);\n            return (\n              <>\n                <HoriChar name={t.name} avatar={t.avatar}></HoriChar>{\" \"}\n                <div\n                  style={{\n                    fontSize: \"0.8em\",\n                    fontWeight: \"bold\",\n                    padding: \"2px\",\n                  }}\n                ></div>\n              </>\n            );\n          },\n        ],\n        [action.type === \"pass\", () => <div></div>]\n      )}\n    </div>\n  );\n}\n\nfunction DisplayChar({\n  char,\n  charHover,\n  currentChar,\n  onMouseEnter,\n  onMouseLeave,\n  onClick,\n  myTeam,\n}) {\n  let { id, hp, avatar } = char;\n\n  let ally = char.team === myTeam;\n\n  let charRef = useRef(char);\n  useEffect(() => {\n    charRef.current = char;\n  }, [char]);\n\n  let [position, setPosition] = useState({ x: char.x, y: char.y });\n\n  let [endTurnAnim, setEndTurnAnim] = useState(null);\n\n  useAnimationFrame(() => {\n    let current = charRef.current;\n    if (!current.anim) {\n      setPosition(current);\n    } else {\n      let elapsed = performance.now() - current.anim.startTime;\n      let max = 500;\n      let lambda = Math.min(1, Math.max(0, elapsed / max));\n\n      if (current.anim.type === EFFECT_TYPES.ANIM_MOVE) {\n        setPosition({\n          x: current.anim.from.x * (1 - lambda) + current.anim.to.x * lambda,\n          y: current.anim.from.y * (1 - lambda) + current.anim.to.y * lambda,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_ATTACK) {\n        let dd = smoothstep(0, 0.5, lambda) * smoothstep(1.0, 0.5, lambda);\n        setPosition({\n          x: current.x * (1 - dd) + (current.x + current.anim.d.x * 0.5) * dd,\n          y: current.y * (1 - dd) + (current.y + current.anim.d.y * 0.5) * dd,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_ARROW) {\n        let dd = smoothstep(0, 0.5, lambda) * smoothstep(1.0, 0.5, lambda);\n        setPosition({\n          x:\n            current.x * (1 - dd) +\n            (current.x + (0.5 * current.anim.d.x) / current.anim.d.l) * dd,\n          y:\n            current.y * (1 - dd) +\n            (current.y + (0.5 * current.anim.d.y) / current.anim.d.l) * dd,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_END_TURN) {\n        let dd = -(30 + smoothstep(0, 1, lambda) * 10);\n        setEndTurnAnim({\n          y: dd + \"px\",\n          opacity: smoothstep(0, 0.4, lambda) * smoothstep(1, 0.7, lambda),\n        });\n        if (lambda === 1) {\n          setEndTurnAnim(null);\n        }\n      }\n      if (lambda === 1) {\n        current.anim = null;\n      }\n    }\n  });\n\n  let boxShadow = useMemo(() => {\n    let arr = [];\n    arr.push(\"0px 0px 0px 2px \" + (ally ? \"#0f0\" : \"#f00\"));\n\n    if (currentChar.id === char.id) {\n      arr.push(\"0px 0px 5px #0009\");\n      arr.push(\"0px 0px 20px blue\");\n    } else {\n      arr.push(\"0px 0px 20px #0009\");\n    }\n\n    return arr.join(\",\");\n  }, [currentChar, ally, char]);\n\n  useEffect(() => {\n    console.log(boxShadow);\n  }, [boxShadow]);\n\n  return (\n    <div\n      key={id}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onClick={onClick}\n      style={{\n        position: \"absolute\",\n        left: (0.15 + position.x) * TILE_WIDTH + \"px\",\n        top: (0.15 + position.y) * TILE_WIDTH + \"px\",\n        color: \"#eee\",\n        fontWeight: 500,\n        background: charHover === id ? \"#fff\" : \"#0000\",\n        width: TILE_WIDTH * 0.7 + \"px\",\n        height: TILE_WIDTH * 0.7 + \"px\",\n\n        boxShadow,\n\n        borderRadius: \"50%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        userSelect: \"none\",\n        // transition: \"300ms\",\n      }}\n    >\n      {/* endTurnAnim */}\n      {endTurnAnim && (\n        <div\n          key=\"endTurn\"\n          style={{\n            position: \"absolute\",\n            left: \"50%\",\n            top: \"0px\",\n            transform: \"translate(-50%,\" + endTurnAnim.y + \")\",\n            zIndex: \"500\",\n          }}\n        >\n          <div\n            style={{\n              background: \"#fff9\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"40px\",\n              height: \"40px\",\n              borderRadius: \"50%\",\n              opacity: endTurnAnim.opacity,\n            }}\n          >\n            <img\n              style={{ width: \"20px\" }}\n              src={process.env.PUBLIC_URL + \"/img/time.svg\"}\n            ></img>\n          </div>\n        </div>\n      )}{\" \"}\n      <img style={{ width: \"30px\" }} src={avatar}></img>\n      <div\n        style={{\n          background: \"#111\",\n          padding: \"2px 1px 2px 2px\",\n          display: \"flex\",\n        }}\n      >\n        {[...Array(DEFAULT_HP).keys()].map((i) => (\n          <div\n            key={i}\n            style={{\n              width: \"4px\",\n              height: \"4px\",\n              borderRadius: \"1px\",\n              margin: \"0px 1px 0px 0px\",\n              transition: \"300ms\",\n              background: swi(\n                [hp === 0, \"#000\"],\n                [i + 1 <= hp, \"green\"],\n                \"#e00\"\n              ),\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction DLine({ category, value }) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        border: \"1px solid white\",\n        margin: \"5px\",\n        padding: \"5px\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n      }}\n    >\n      <div style={{ width: \"100px\", flex: \"none\", textAlign: \"left\" }}>\n        {category}\n      </div>\n      <div style={{ width: \"100px\", textAlign: \"left\" }}>{value}</div>\n    </div>\n  );\n}\n\nfunction Detail({ tileHover, charHover, state }) {\n  let char = useMemo(() => {\n    return state.chars.find((e) => e.id === charHover);\n  }, [state, charHover]);\n\n  let tile = useMemo(() => {\n    if (!tileHover) return;\n    return state.map.tiles[tileHover.index];\n  }, [tileHover, state]);\n\n  return (\n    <div\n      style={{\n        flex: \"none\",\n        width: \"300px\",\n        background: \"#345\",\n        color: \"#fff\",\n        position: \"absolute\",\n        bottom: \"0px\",\n        right: \"0px\",\n      }}\n    >\n      {swi(\n        [\n          char,\n          () => (\n            <div>\n              <div style={{ margin: \"10px\" }}>\n                <img src={char.avatar} style={{ width: \"30px\" }}></img>\n              </div>\n              <div style={{ margin: \"10px\" }}>{char.name}</div>\n              <DLine category={\"team\"} value={char.team}></DLine>\n              <DLine category={\"user\"} value={char.user}></DLine>\n              <DLine category={\"hp\"} value={char.hp}></DLine>\n              <DLine category={\"pa\"} value={char.pa}></DLine>\n              {Object.keys(char.cooldown).length > 0 && (\n                <>\n                  <div>Cooldown</div>\n                  {Object.keys(char.cooldown).map((k) => (\n                    <DLine category={k} value={char.cooldown[k]}></DLine>\n                  ))}\n                </>\n              )}\n            </div>\n          ),\n        ],\n        [\n          tile,\n          () => (\n            <div>\n              {\" \"}\n              <DLine category={\"type\"} value={tileName(tile)}></DLine>\n              {tile.effects.length > 0 && (\n                <>\n                  <div>Effects</div>\n                  {tile.effects.map((effect) => (\n                    <div>\n                      <DLine category={\"type\"} value={effect.type}></DLine>\n                      <DLine\n                        category={\"cooldown\"}\n                        value={effect.cooldown}\n                      ></DLine>\n                    </div>\n                  ))}\n                </>\n              )}\n            </div>\n          ),\n        ],\n        <div>Hover something</div>\n      )}\n    </div>\n  );\n}\n\nfunction Tile({ colIndex, rowIndex, state, tile, tileHover }) {\n  return (\n    <div\n      key={colIndex}\n      style={{\n        width: \"50px\",\n        height: \"50px\",\n        position: \"relative\",\n        transition: \"50ms\",\n        background: swi(\n          [tile.type === 1, \"#333\"],\n          [\n            tile.type === 0 &&\n              tileHover?.index === colIndex + state.map.w * rowIndex,\n            \"#bbb\",\n          ],\n          \"#999\"\n        ),\n      }}\n    >\n      {tile.effects.map((effect) => (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%,-50%)\",\n            width: \"30px\",\n            height: \"30px\",\n            background: \"#f609\",\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n}\n\nfunction Char3D({\n  char,\n  charHover,\n  currentChar,\n  onMouseEnter,\n  onMouseLeave,\n  onClick,\n  myTeam,\n}) {\n  const ref = useRef();\n  const groupRef = useRef();\n  let ally = char.team === myTeam;\n\n  let charRef = useRef(char);\n  useEffect(() => {\n    charRef.current = char;\n  }, [char]);\n\n  let setPosition = useCallback(({ x, y }) => {\n    groupRef.current.position.x = x;\n    groupRef.current.position.z = y;\n  });\n  // let [position, setPosition] = useState({ x: char.x, y: char.y });\n\n  let [endTurnAnim, setEndTurnAnim] = useState(null);\n\n  useFrame(() => {\n    let current = charRef.current;\n    if (!current.anim) {\n      setPosition(current);\n    } else {\n      let elapsed = performance.now() - current.anim.startTime;\n      let max = 500;\n      let lambda = Math.min(1, Math.max(0, elapsed / max));\n\n      if (current.anim.type === EFFECT_TYPES.ANIM_MOVE) {\n        setPosition({\n          x: current.anim.from.x * (1 - lambda) + current.anim.to.x * lambda,\n          y: current.anim.from.y * (1 - lambda) + current.anim.to.y * lambda,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_ATTACK) {\n        let dd = smoothstep(0, 0.5, lambda) * smoothstep(1.0, 0.5, lambda);\n        setPosition({\n          x: current.x * (1 - dd) + (current.x + current.anim.d.x * 0.5) * dd,\n          y: current.y * (1 - dd) + (current.y + current.anim.d.y * 0.5) * dd,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_ARROW) {\n        let dd = smoothstep(0, 0.5, lambda) * smoothstep(1.0, 0.5, lambda);\n        setPosition({\n          x:\n            current.x * (1 - dd) +\n            (current.x + (0.5 * current.anim.d.x) / current.anim.d.l) * dd,\n          y:\n            current.y * (1 - dd) +\n            (current.y + (0.5 * current.anim.d.y) / current.anim.d.l) * dd,\n        });\n      } else if (current.anim.type === EFFECT_TYPES.ANIM_END_TURN) {\n        let dd = -(30 + smoothstep(0, 1, lambda) * 10);\n        setEndTurnAnim({\n          y: dd + \"px\",\n          opacity: smoothstep(0, 0.4, lambda) * smoothstep(1, 0.7, lambda),\n        });\n        if (lambda === 1) {\n          setEndTurnAnim(null);\n        }\n      }\n      if (lambda === 1) {\n        current.anim = null;\n      }\n    }\n  });\n\n  // useFrame((state, delta) => (ref.current.rotation.y += 0.01));\n  return (\n    <>\n      <group ref={groupRef} position={[0, 0, 0]}>\n        {\" \"}\n        {currentChar.id === char.id && (\n          <spotLight\n            target={ref.current}\n            castShadow\n            position={[0, 10, 0]}\n            angle={0.15}\n            penumbra={1}\n            color={\"#00f\"}\n          />\n        )}\n        <Html\n          prepend // Project content behind the canvas (default: false)\n          center // Adds a -50%/-50% css transform (default: false) [ignored in transform mode]\n          fullscreen // Aligns to the upper-left corner, fills the screen (default:false) [ignored in transform mode]\n          distanceFactor={10} // If set (default: undefined), children will be scaled by this factor, and also by distance to a PerspectiveCamera / zoom by a OrthographicCamera.\n          zIndexRange={[100, 0]} // Z-order range (default=[16777271, 0])\n          // portal={domnodeRef} // Reference to target container (default=undefined)\n          transform // If true, applies matrix3d transformations (default=false)\n          sprite // Renders as sprite, but only in transform mode (default=false)\n          // calculatePosition={(el: Object3D, camera: Camera, size: { width: number; height: number }) => number[]} // Override default positioning function. May be removed in the future (default=undefined) [ignored in transform mode]\n          style={{ transform: \"translate(0px, -50px)\", position: \"relative\" }}\n          pointerEvents=\"none\"\n        >\n          {endTurnAnim && (\n            <div\n              key=\"endTurn\"\n              style={{\n                position: \"absolute\",\n                left: \"50%\",\n                top: \"0px\",\n                transform: \"translate(-50%,\" + endTurnAnim.y + \")\",\n                zIndex: \"500\",\n              }}\n            >\n              <div\n                style={{\n                  background: \"#fff9\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  width: \"40px\",\n                  height: \"40px\",\n                  borderRadius: \"50%\",\n                  opacity: endTurnAnim.opacity,\n                }}\n              >\n                <img\n                  style={{ width: \"20px\" }}\n                  src={process.env.PUBLIC_URL + \"/img/time.svg\"}\n                ></img>\n              </div>\n            </div>\n          )}\n          <div\n            style={{\n              background: \"#111\",\n              borderRadius: \"3px\",\n              padding: \"2px 1px 2px 2px\",\n              display: \"flex\",\n            }}\n          >\n            {[...Array(DEFAULT_HP).keys()].map((i) => (\n              <div\n                key={i}\n                style={{\n                  width: \"4px\",\n                  height: \"4px\",\n                  borderRadius: \"1px\",\n                  margin: \"0px 1px 0px 0px\",\n                  transition: \"300ms\",\n                  background: swi(\n                    [char.hp === 0, \"#000\"],\n                    [i + 1 <= char.hp, \"#0f0\"],\n                    \"#e00\"\n                  ),\n                }}\n              ></div>\n            ))}\n          </div>\n        </Html>\n        <mesh\n          castShadow\n          receiveShadow\n          position={[0, 1.3 / 2, 0]}\n          ref={ref}\n          scale={1}\n          onClick={onClick}\n          onPointerOver={onMouseEnter}\n          onPointerOut={onMouseLeave}\n        >\n          <boxGeometry args={[0.7, 1.3, 0.7]} />\n          <meshStandardMaterial color={\"orange\"} />\n        </mesh>\n        <Ring\n          position={[0, 0.01, 0]}\n          args={[0.5, 0.6, 32]}\n          rotation-x={-Math.PI / 2}\n        >\n          <meshBasicMaterial attach=\"material\" color={ally ? \"#0b0\" : \"#f00\"} />\n        </Ring>\n        {charHover === char.id && (\n          <Ring\n            position={[0, 0.01, 0]}\n            args={[0.6, 0.7, 32]}\n            rotation-x={-Math.PI / 2}\n          >\n            <meshBasicMaterial attach=\"material\" color={\"#fff\"} />\n          </Ring>\n        )}\n      </group>\n    </>\n  );\n}\n\nfunction Tile3D({ colIndex, rowIndex, state, tile, tileHover, setTileHover }) {\n  let index = useMemo(\n    () => colIndex + rowIndex * state.map.w,\n    [colIndex, rowIndex, state]\n  );\n  let hovered = useMemo(\n    () => tileHover?.index === index,\n    [colIndex, rowIndex, state, tileHover]\n  );\n\n  let isFire = useMemo(() => {\n    return tile.effects.find((e) => e.type === \"fire\") !== undefined;\n  });\n  return (\n    <>\n      {swi(\n        [\n          tile.type === 1,\n          () => (\n            <mesh\n              onPointerEnter={() => {\n                setTileHover({\n                  x: colIndex,\n                  y: rowIndex,\n                  index,\n                });\n              }}\n              castShadow\n              receiveShadow\n              position={[colIndex, 0.5, rowIndex]}\n              scale={1}\n            >\n              <boxGeometry args={[1, 1, 1]} />\n              <meshStandardMaterial color={\"#555\"} />\n            </mesh>\n          ),\n        ],\n        [\n          tile.type === 0,\n          () => (\n            <mesh\n              onPointerEnter={() => {\n                setTileHover({\n                  x: colIndex,\n                  y: rowIndex,\n                  index,\n                });\n              }}\n              castShadow\n              receiveShadow\n              position={[colIndex, -0.05, rowIndex]}\n              scale={1}\n            >\n              <boxGeometry args={[1, 0.1, 1]} />\n              <meshStandardMaterial color={hovered ? \"#bbb\" : \"#999\"} />\n            </mesh>\n          ),\n        ]\n      )}\n      {isFire && (\n        <>\n          <pointLight\n            distance={1.5}\n            intensity={4}\n            position={[colIndex, 0.3, rowIndex]}\n            color={\"#fb0\"}\n          />\n          <group position={[colIndex, 0.0, rowIndex]}>\n            {\" \"}\n            <ParticleSystem active={true}></ParticleSystem>\n          </group>\n\n          {/* <mesh position={[colIndex, 0.1, rowIndex]} scale={1}>\n            <boxGeometry args={[1, 0, 1]} />\n\n            <meshBasicMaterial color={\"#fb55\"} />\n          </mesh> */}\n        </>\n      )}\n    </>\n    // <div\n    //   key={colIndex}\n    //   style={{\n    //     width: \"50px\",\n    //     height: \"50px\",\n    //     position: \"relative\",\n    //     transition: \"50ms\",\n    //     background: swi(\n    //       [tile.type === 1, \"#333\"],\n    //       [\n    //         tile.type === 0 &&\n    //           tileHover?.index === colIndex + state.map.w * rowIndex,\n    //         \"#bbb\",\n    //       ],\n    //       \"#999\"\n    //     ),\n    //   }}\n    // >\n    //   {tile.effects.map((effect) => (\n    //     <div\n    //       style={{\n    //         position: \"absolute\",\n    //         top: \"50%\",\n    //         left: \"50%\",\n    //         transform: \"translate(-50%,-50%)\",\n    //         width: \"30px\",\n    //         height: \"30px\",\n    //         background: \"#f609\",\n    //       }}\n    //     ></div>\n    //   ))}\n    // </div>\n  );\n}\n\nfunction ParticleSystem({ active }) {\n  const mesh = useRef();\n\n  let count = 100;\n  const dummy = useMemo(() => new THREE.Object3D(), []);\n  // Generate some random positions, speed factors and timings\n  const particles = useMemo(() => {\n    const temp = [];\n    if (!active) return temp;\n    for (let i = 0; i < count; i++) {\n      const startLife = 0;\n      const maxLife = Math.random() * 2000;\n      const x = Math.random();\n      const y = Math.random();\n      const z = Math.random();\n      const vx = Math.random();\n      const vy = Math.random();\n      const vz = Math.random();\n      const xFactor = -50 + Math.random() * 100;\n      const yFactor = -50 + Math.random() * 100;\n      const zFactor = -50 + Math.random() * 100;\n      temp.push({\n        startLife,\n        maxLife,\n        x,\n        y,\n        z,\n        vx,\n        vy,\n        vz,\n        xFactor,\n        yFactor,\n        zFactor,\n      });\n    }\n    return temp;\n  }, [active]);\n\n  useFrame((state, delta) => {\n    // Run through the randomized data to calculate some movement\n    let time = performance.now();\n    particles.forEach((particle, i, arr) => {\n      let {\n        startLife,\n        maxLife,\n        x,\n        y,\n        z,\n        vx,\n        vy,\n        vz,\n        xFactor,\n        yFactor,\n        zFactor,\n      } = particle;\n\n      let lambda = (time - startLife) / (maxLife - startLife);\n      if (lambda > 1) {\n        x = Math.random() - 0.5;\n        y = Math.random() * 0.2;\n        z = Math.random() - 0.5;\n        vx = 0.5 * (Math.random() - 0.5);\n        vy = Math.random();\n        vz = 0.5 * (Math.random() - 0.5);\n        startLife = time;\n        maxLife = time + 1000 + Math.random() * 1000;\n        lambda = 0;\n      }\n\n      x += vx * delta;\n      y += vy * delta;\n      z += vz * delta;\n\n      let s = 0.15;\n\n      dummy.position.set(x, y, z);\n      dummy.scale.set(s, s, s);\n      dummy.rotation.set(xFactor, yFactor, zFactor);\n      dummy.updateMatrix();\n\n      arr[i] = {\n        startLife,\n        maxLife,\n        x,\n        y,\n        z,\n        vx,\n        vy,\n        vz,\n        xFactor,\n        yFactor,\n        zFactor,\n      };\n\n      mesh.current.setMatrixAt(i, dummy.matrix);\n    });\n    mesh.current.instanceMatrix.needsUpdate = true;\n  });\n  return (\n    <>\n      <instancedMesh ref={mesh} args={[null, null, count]}>\n        <dodecahedronBufferGeometry attach=\"geometry\" args={[0.2, 0]} />\n        <meshBasicMaterial\n          attach=\"material\"\n          color=\"#fda\"\n          blending={THREE.AdditiveBlending}\n          transparent\n          opacity={0.7}\n        />\n      </instancedMesh>\n    </>\n  );\n}\n","// eslint-disable-next-line\nimport MyWorker from \"comlink-loader!./StateCompute\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Draw from \"./Draw\";\nimport {\n  applyEffects,\n  DEFAULT_HP,\n  DEFAULT_PA,\n  evaluateAction,\n  nextChars,\n} from \"./StateCompute\";\n\nvar _ = require(\"lodash\");\nconst worker = new MyWorker();\nlet TILES = `\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n  1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n  1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n  1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n  1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n`;\n\nlet MAP = {\n  w: 14,\n  h: 14,\n  tiles: TILES.replace(\" \", \"\")\n    .split(\",\")\n    .map((e) => {\n      return {\n        type: parseInt(e),\n        effects: [],\n      };\n    }),\n};\n\n// MAP.tiles[16].effects.push({ type: \"fire\", cooldown: \"5\" });\n\nlet alreadyReducing = null;\nasync function reducer(old, action) {\n  console.log(\"dispatch start\", action.type);\n  if (action.type === \"tick\") {\n    if (old.currentChar.user === \"me\") {\n      return old;\n    } else {\n      //\n      action = await worker.generateBestIAAction(old);\n    }\n  }\n  let state = _.cloneDeep(old);\n\n  let { cost, possible, effects } = evaluateAction(\n    state,\n    action,\n    old.currentChar.user === \"me\"\n  );\n  if (possible) {\n    state.actions.push({\n      computedAt: performance.now(),\n      ...action,\n      char: state.currentChar,\n      cost,\n    });\n\n    applyEffects(state, effects, true);\n  }\n  console.log(\"dispatch end\");\n\n  return state;\n}\n\nfunction defaultState() {\n  let randId = () => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n\n  let ids = [0, randId(), randId(), randId(), randId(), randId()];\n\n  let s = {\n    lastEffectTime: performance.now(),\n\n    map: MAP,\n    objects: [\n      {\n        id: randId(),\n        type: \"barrel\",\n        name: \"barrel\",\n        x: 6,\n        y: 6,\n        hp: 1,\n        onDestroyEffect: { type: \"explode\", damage: 1, radius: 2 },\n      },\n    ],\n    chars: [\n      {\n        id: ids[0],\n        x: 1,\n        y: 1,\n        name: \"foo\",\n        lastPlayedTurn: -1,\n        user: \"me\",\n        team: \"1\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[0] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n      {\n        id: ids[1],\n        x: 5,\n        y: 2,\n        name: \"bar\",\n        lastPlayedTurn: -1,\n        user: \"me\",\n        team: \"1\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[1] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n      {\n        id: ids[2],\n        x: 9,\n        y: 3,\n        name: \"baz\",\n        lastPlayedTurn: -1,\n        user: \"me\",\n        team: \"1\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[2] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n      {\n        id: ids[3],\n        x: 11,\n        y: 11,\n        name: \"zoo\",\n        lastPlayedTurn: -1,\n        user: \"ia\",\n        team: \"2\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[3] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n      {\n        id: ids[4],\n        x: 2,\n        y: 11,\n        name: \"moo\",\n        lastPlayedTurn: -1,\n        user: \"ia\",\n        team: \"2\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[4] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n      {\n        id: ids[5],\n        x: 6,\n        y: 11,\n        name: \"noo\",\n        lastPlayedTurn: -1,\n        user: \"ia\",\n        team: \"2\",\n        pa: DEFAULT_PA,\n        avatar: \"https://avatars.dicebear.com/api/bottts/\" + ids[5] + \".svg\",\n        hp: DEFAULT_HP,\n        cooldown: {},\n      },\n    ],\n    actions: [],\n    effects: [],\n  };\n\n  s.nextChars = nextChars(s);\n  s.currentChar = s.nextChars[0];\n\n  return s;\n}\n\nfunction App() {\n  let user = \"me\";\n\n  let stateRef = useRef(defaultState());\n\n  let dispatch = useCallback(async (action) => {\n    if (alreadyReducing) {\n      console.error(\n        \"alreadyReducing !!!\",\n        alreadyReducing,\n        \"while starting\",\n        action\n      );\n      if (action.type === \"tick\") return;\n    }\n    alreadyReducing = action;\n    stateRef.current = await reducer(stateRef.current, action);\n    alreadyReducing = null;\n    setState(stateRef.current);\n  }, []);\n\n  let [state, setState] = useState(stateRef.current);\n\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch({ type: \"tick\" });\n    }, 500);\n  }, [state, dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Draw user={user} state={state} do_action={dispatch}></Draw>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}